
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, c as createEventDispatcher, a0 as DB, o as onMount, a1 as defaultPageTransition, e as element, h as attr_dev, g as add_location, l as insert_dev, n as listen_dev, z as transition_in, q as add_render_callback, r as create_bidirectional_transition, A as transition_out, u as detach_dev, C as noop, H as create_component, I as mount_component, J as destroy_component } from './main-bbe5dd49.js';
import { T as Thread } from './Thread-5bd85a47.js';

/* advanced/routes/Thread.svelte generated by Svelte v3.52.0 */
const file = "advanced/routes/Thread.svelte";

// (21:1) {:else}
function create_else_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "The thread you're trying to access doesn't exist.";
			add_location(p, file, 21, 2, 581);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(21:1) {:else}",
		ctx
	});

	return block;
}

// (14:1) {#if comment}
function create_if_block(ctx) {
	let thread;
	let current;

	thread = new Thread({
			props: {
				singleThread: true,
				isPage: true,
				loadComments: true,
				comment: /*comment*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(thread.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(thread, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(thread.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(thread.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(thread, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(14:1) {#if comment}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let div_transition;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*comment*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "page");
			add_location(div, file, 12, 0, 371);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "outroend", /*outroend_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if_block.p(ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, defaultPageTransition, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			if (!div_transition) div_transition = create_bidirectional_transition(div, defaultPageTransition, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Thread', slots, []);
	let { params } = $$props;
	const dispatch = createEventDispatcher();
	const comment = DB.getComment(params.threadID);

	onMount(() => {
		dispatch('hasOutro');
	});

	$$self.$$.on_mount.push(function () {
		if (params === undefined && !('params' in $$props || $$self.$$.bound[$$self.$$.props['params']])) {
			console.warn("<Thread> was created without expected prop 'params'");
		}
	});

	const writable_props = ['params'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Thread> was created with unknown prop '${key}'`);
	});

	const outroend_handler = () => dispatch('outroDone');

	$$self.$$set = $$props => {
		if ('params' in $$props) $$invalidate(2, params = $$props.params);
	};

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		Thread,
		defaultPageTransition,
		DB,
		params,
		dispatch,
		comment
	});

	$$self.$inject_state = $$props => {
		if ('params' in $$props) $$invalidate(2, params = $$props.params);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [dispatch, comment, params, outroend_handler];
}

class Thread_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { params: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Thread_1",
			options,
			id: create_fragment.name
		});
	}

	get params() {
		throw new Error("<Thread>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set params(value) {
		throw new Error("<Thread>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Thread_1 as default };
//# sourceMappingURL=Thread-24fd2f6c.js.map
