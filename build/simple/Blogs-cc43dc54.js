import { S as SvelteComponentDev, i as init, d as dispatch_dev, x as handle_promise, s as safe_not_equal, e as element, b as space, c as add_location, f as attr_dev, j as insert_dev, k as append_dev, l as listen_dev, y as update_await_block_branch, z as transition_in, n as add_render_callback, A as transition_out, o as create_bidirectional_transition, p as detach_dev, v as validate_slots, q as createEventDispatcher, u as onMount, w as defaultPageTransition, B as validate_each_argument, t as text, C as noop, D as empty, E as group_outros, F as check_outros, G as destroy_each, H as create_component, I as mount_component, J as destroy_component } from './main-a84e5ab8.js';
import { R as RouteLink } from './RouteLink-3c4a39b8.js';

/* simple/routes/Blogs.svelte generated by Svelte v3.52.0 */
const file = "simple/routes/Blogs.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (35:2) {:catch err}
function create_catch_block(ctx) {
	let p;
	let t0;
	let t1_value = /*err*/ ctx[6] + "";
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("Failed to fetch blog posts: ");
			t1 = text(t1_value);
			attr_dev(p, "class", "error svelte-tmwvdr");
			add_location(p, file, 35, 3, 1079);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(35:2) {:catch err}",
		ctx
	});

	return block;
}

// (28:2) {:then blogs}
function create_then_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*blogs*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*fetchBlogs*/ 0) {
				each_value = /*blogs*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(28:2) {:then blogs}",
		ctx
	});

	return block;
}

// (30:4) <RouteLink to='blog' params={{id: blog.id}} class='blog'>
function create_default_slot(ctx) {
	let h4;
	let t0_value = /*blog*/ ctx[3].title + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*blog*/ ctx[3].preview + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			attr_dev(h4, "class", "svelte-tmwvdr");
			add_location(h4, file, 30, 5, 984);
			attr_dev(p, "class", "svelte-tmwvdr");
			add_location(p, file, 31, 5, 1011);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			append_dev(h4, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(30:4) <RouteLink to='blog' params={{id: blog.id}} class='blog'>",
		ctx
	});

	return block;
}

// (29:3) {#each blogs as blog}
function create_each_block(ctx) {
	let routelink;
	let current;

	routelink = new RouteLink({
			props: {
				to: "blog",
				params: { id: /*blog*/ ctx[3].id },
				class: "blog",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(routelink.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(routelink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const routelink_changes = {};

			if (dirty & /*$$scope*/ 128) {
				routelink_changes.$$scope = { dirty, ctx };
			}

			routelink.$set(routelink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(routelink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(routelink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(routelink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(29:3) {#each blogs as blog}",
		ctx
	});

	return block;
}

// (26:23)     <p class='placeholder'>Loading blog posts...</p>   {:then blogs}
function create_pending_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "Loading blog posts...";
			attr_dev(p, "class", "placeholder svelte-tmwvdr");
			add_location(p, file, 26, 3, 827);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(26:23)     <p class='placeholder'>Loading blog posts...</p>   {:then blogs}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let h1;
	let t1;
	let div0;
	let div1_transition;
	let current;
	let mounted;
	let dispose;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 2,
		error: 6,
		blocks: [,,,]
	};

	handle_promise(fetchBlogs(), info);

	const block = {
		c: function create() {
			div1 = element("div");
			h1 = element("h1");
			h1.textContent = "Blog posts";
			t1 = space();
			div0 = element("div");
			info.block.c();
			add_location(h1, file, 23, 1, 759);
			attr_dev(div0, "class", "blogs svelte-tmwvdr");
			add_location(div0, file, 24, 1, 780);
			attr_dev(div1, "class", "page");
			add_location(div1, file, 22, 0, 665);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, h1);
			append_dev(div1, t1);
			append_dev(div1, div0);
			info.block.m(div0, info.anchor = null);
			info.mount = () => div0;
			info.anchor = null;
			current = true;

			if (!mounted) {
				dispose = listen_dev(div1, "outroend", /*outroend_handler*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			update_await_block_branch(info, ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.block);

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, defaultPageTransition, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, defaultPageTransition, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			info.block.d();
			info.token = null;
			info = null;
			if (detaching && div1_transition) div1_transition.end();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

let storedBlogsPreview = null;

async function fetchBlogs() {
	if (storedBlogsPreview !== null) return storedBlogsPreview;
	const resp = await fetch('blogs.json');

	// simulate latency
	await new Promise(r => setTimeout(r, 500));

	const json = await resp.json();
	storedBlogsPreview = json;
	return json;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Blogs', slots, []);
	const dispatch = createEventDispatcher();

	onMount(() => {
		dispatch('hasOutro');
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Blogs> was created with unknown prop '${key}'`);
	});

	const outroend_handler = () => dispatch('outroDone');

	$$self.$capture_state = () => ({
		storedBlogsPreview,
		RouteLink,
		onMount,
		createEventDispatcher,
		defaultPageTransition,
		dispatch,
		fetchBlogs
	});

	return [dispatch, outroend_handler];
}

class Blogs extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blogs",
			options,
			id: create_fragment.name
		});
	}
}

export { Blogs as default };
//# sourceMappingURL=Blogs-cc43dc54.js.map
